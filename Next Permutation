cè¯­è¨€ï¼š
void nextPermutation(int* nums, int numsSize){
    int i = numsSize-2;
    while(i>=0 && nums[i+1]<=nums[i])   i--;
    if(i>=0){
        int j = numsSize-1;
        while(j>=0 && nums[j]<=nums[i])     j--;
        swap(nums, i, j);
    }
    reverse(nums, i+1, numsSize-1);
}

void reverse(int* nums, int start, int end){
    int i = start, j = end;
    while(i<j){
        swap(nums, i, j);
        i++;
        j--;
    }
}

void swap(int* nums, int i, int j){
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
}

java:
class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length-2;
        while(i>=0 && nums[i+1]<=nums[i])   i--;
        if(i>=0){
            int j = nums.length-1;
            while(j>=0 && nums[j]<=nums[i])     j--;
            swap(nums,i,j);
        }
        reverse(nums, i+1);
    }
    
    private void reverse(int[] nums, int start){
        int end = nums.length-1;
        while(start<end){
            swap(nums, start, end);
            start++;
            end--;
        }
    }

    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
