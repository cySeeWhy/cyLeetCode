

#include<stdio.h>
#include<stdlib.h>

#define Status int
#define ElemType int

typedef struct LNode {
	ElemType data;
	struct LNode *next;
}LNode;
typedef struct LNode *LinkedList;

Status GetElem(LNode *L, int i, ElemType *e) {
	int j;
	LNode *p;
	p = L;
	j = 1;
	while (p && j < i) {
		p = p->next;
		j++;
	}
	if (!p || j > i)	return 0;
	*e = p->data;
	return 1;
}


Status ListInsert(LNode *L, int i, ElemType e) {
	if (i < 1)	return 0;
	LNode *p,*s;
	p = L;
	int j = 1;
	while (p && j<i) {
		p = p->next;
		j++;
	}
	if (!p || j > i)	return 0;
	s = (LNode*)malloc(sizeof(LNode));   //新节点一定要用malloc开辟内存
	s->data = e;
	s->next = p->next;
	p->next = s;
	return 1;
	
}

Status ListDelete(LNode *L, int i, ElemType *e) {
	if (i < 1)	return 0;
	LNode *p, *q;
	p = L;
	int j = 1;
	while (p->next && j < i) {
		p = p->next;
		j++;
	}
	if (!(p->next) || j > i)	return 0;
	q = p->next;
	p->next = q->next;
	*e = q->data;
	free(q);
	return 1;
}

void CreateListHead(LNode **L, int n) {
	LNode *p;
	srand(time(0));
	*L = (LNode*)malloc(sizeof(LNode));
	(*L)->next = NULL;
	p = (LNode*)malloc(sizeof(LNode));
	p->data = rand() % 100 + 1;
	p->next = (*L)->next;
	(*L)->next = p;
	
}

void CreateListTail(LNode **L, int n) {
	LNode *p,*r;
	srand(time(0));
	*L = (LNode*)malloc(sizeof(LNode));
	r = L;
	for (int i = 0; i < n; i++) {
		p = (LNode*)malloc(sizeof(LNode));
		p->data = rand() % 100 + 1;
		r->next = p;
		r = p;
	}
	r->next = NULL;
}

Status ClearList(LNode *L) {
	LNode *p, *q;
	p = L;
	while (p) {
		q = p->next;
		free(p);
		p = q;
	}
	return 1;
}


void PrintList(LNode *L)
{
	LNode *p;
	p = L;
	
	while (p!=NULL)
	{
		printf("%d ", p->data);
		p = p->next;
	}
}

int main() {
	LNode *L = NULL;
	CreateListHead(&L, 10);
	printf("%d ", L->data);
}
