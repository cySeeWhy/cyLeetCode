/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

c语言：递归
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){
    if(!l1)     return l2;
    if(!l2)     return l1;
    if(l1->val < l2->val){
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }else{
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}

非递归：
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){
    if(!l1)     return l2;
    if(!l2)     return l1;
    struct ListNode *dummyNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode *cur = dummyNode;
    while(l1 && l2){
        if(l1->val < l2->val){
            cur->next = l1;
            l1 = l1->next;
        }else{
            cur->next = l2;
            l2 = l2->next;
        }
        cur = cur->next;
    }
    if(!l1)     cur->next = l2;
    if(!l2)     cur->next = l1;
    return dummyNode->next;
}

java:
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null && l2==null)    return null;
        if(l1!=null && l2==null)    return l1;
        if(l1==null && l2!=null)    return l2;
        ListNode dummyNode = new ListNode(0);
        if(l1.val<l2.val){
            dummyNode.next = new ListNode(l1.val);
            dummyNode.next.next = mergeTwoLists(l1.next, l2);
        }else{
            dummyNode.next = new ListNode(l2.val);
            dummyNode.next.next = mergeTwoLists(l1, l2.next);
        }
        return dummyNode.next;
    }
}
