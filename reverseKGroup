c语言：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* reverse(struct ListNode* head);
struct ListNode* reverseKGroup(struct ListNode* head, int k){
    if(k==1)    return head;
    struct ListNode *dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummyHead->next = head;
    struct ListNode *pre = dummyHead;
    struct ListNode *end = dummyHead;
    while(end->next!=NULL){
        for(int i=0;i<k && end!=NULL;i++){
            end = end->next;
        }
        if(end==NULL)   break;
        struct ListNode *start = pre->next;
        struct ListNode *next = end->next;
        end->next = NULL;
        pre->next = reverse(start);
        start->next = next;
        pre = start;
        end = start;
    }
    return dummyHead->next;
}
struct ListNode* reverse(struct ListNode* head){
    struct ListNode *pre = (struct ListNode *)malloc(sizeof(struct ListNode));
    pre = NULL;
    struct ListNode *cur = head;
    while(cur!=NULL){
        struct ListNode *next = cur->next;
        cur->next = pre;
        pre = cur;
        cur = next;
    }
    return pre;
}

java：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution{
    public ListNode reverseKGroup(ListNode head, int k) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;

    ListNode pre = dummy;
    ListNode end = dummy;

    while (end.next != null) {
        for (int i = 0; i < k && end != null; i++) end = end.next;
        if (end == null) break;
        ListNode start = pre.next;
        ListNode next = end.next;
        end.next = null;
        pre.next = reverse(start);
        start.next = next;
        pre = start;
        end = pre;
    }
    return dummy.next;
}

private ListNode reverse(ListNode head) {
    ListNode pre = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode next = curr.next;
        curr.next = pre;
        pre = curr;
        curr = next;
    }
    return pre;
}
}
