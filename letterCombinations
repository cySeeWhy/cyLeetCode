class Solution {
    public List<String> letterCombinations(String digits) {
        Map<Character, String> map = new HashMap<>();
        map.put('2',"abc");
        map.put('3',"def");
        map.put('4',"ghi");
        map.put('5',"jkl");
        map.put('6',"mno");
        map.put('7',"pqrs");
        map.put('8',"tuv");
        map.put('9',"wxyz");
        List<String> res = new ArrayList<>();
        if(digits.length()==0)    return res;
        backTracking(digits, 0, map, new StringBuilder(), res);
        return res;
    }
    public void backTracking(String digits, int count, Map<Character, String> map, StringBuilder temp, List<String> res){
        if(count==digits.length()){
            res.add(new String(temp));
            return;
        }
        for(int i=0;i<map.get(digits.charAt(count)).length();i++){
            temp.append(map.get(digits.charAt(count)).charAt(i));
            backTracking(digits, count+1, map, temp, res);
            temp.deleteCharAt(temp.length()-1);
        }
    }
}
