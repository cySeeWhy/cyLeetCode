class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        if(k==0)    return res;
        Set<List<Integer>> set = new HashSet<>();
        backTracking(1, n, 0, k, new LinkedList<Integer>(), set);
        for(List<Integer> q:set){
            res.add(q);
        }
        return res;
    }
    public void backTracking(int start, int n, int size, int k, LinkedList<Integer> temp, Set<List<Integer>> set){
        if(k==size){
            set.add(new LinkedList<>(temp));
            return;
        }
        for(int i=start;i<=n;i++){
            if(size<k){
                temp.addFirst(i);
                backTracking(i+1, n, size+1, k, temp, set);
                temp.removeFirst();
            }
        }
    }
}
