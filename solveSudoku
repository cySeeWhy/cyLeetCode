class Solution {
    public void solveSudoku(char[][] board) {
        backTracking(board, 0, 0);
    }
    private boolean backTracking(char[][] board, int row, int col){
        if(col==9){
            return backTracking(board, row+1, 0);
        }
        if(row==9)  return true;
        if(board[row][col]!='.'){
            return backTracking(board, row, col+1);
        }
        for(char c='1';c<='9';c++){
            if(!isValid(board, row, col, c))
                continue;
            board[row][col] = c;
            if(backTracking(board, row, col+1)) return true;
            board[row][col] = '.';
        }
        return false;
}

    private boolean isValid(char[][] board, int row, int col, char ch){
        for(int i=0;i<9;i++){
            if(board[row][i]==ch)   return false;
            if(board[i][col]==ch)   return false;
            if(board[row/3*3+i/3][col/3*3+i%3]==ch)   return false;
        }
        return true;
    }
}
