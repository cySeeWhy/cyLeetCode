class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        if(m==0||n==0)    return n+m;
        //dp[i][j]:word1的前i个到word2的前j个需要编辑的距离
        int[][] dp = new int[m+1][n+1];
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if(i==0||j==0)  dp[i][j] = i+j;
                else{
                    if(word1.charAt(i-1)==word2.charAt(j-1))
                        dp[i][j] = dp[i-1][j-1];
                    else
                        dp[i][j] = 1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
                }
            }
        }
        return dp[m][n];
    }
}


static inline int min(int a, int b, int c)
{
    int d = a < b ? a : b;
    return d < c ? d : c;
}

int minDistance(char * word1, char * word2){
    int m = strlen(word1), n = strlen(word2);
    if(m==0||n==0)  return m+n;
    int** dp = (int**)malloc((m+1)*sizeof(int*));
    for(int i=0;i<=m;i++){
        dp[i] = (int*)malloc((n+1)*sizeof(int));
    }
    for(int i=0;i<=m;i++){
        for(int j=0;j<=n;j++){
            if(i==0||j==0)  dp[i][j] = i+j;
            else{
                if(word1[i-1]==word2[j-1])  dp[i][j] = dp[i-1][j-1];
                else{
                    dp[i][j] = 1+min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1]);
                }
            }
        }
    }
    return dp[m][n];
}
